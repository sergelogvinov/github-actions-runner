apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "build-machine.fullname" . }}
  labels:
    {{- include "build-machine.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "build-machine.fullname" . }}
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  updateStrategy:
    type: {{ .Values.updateStrategy.type }}
  # progressDeadlineSeconds: 3600
  selector:
    matchLabels:
      {{- include "build-machine.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "build-machine.selectorLabels" . | nindent 8 }}
    spec:
      enableServiceLinks: false
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "build-machine.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.registry.enabled }}
      hostAliases:
      - ip: "127.0.0.1"
        hostnames:
        - {{ .Values.registry.name }}
      {{- end }}
      containers:
      {{- if .Values.buildkit.enabled }}
        - name: containerd
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.buildkit.image.repository }}:{{ .Values.buildkit.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.buildkit.image.pullPolicy }}
          command: ["/usr/bin/containerd"]
          volumeMounts:
            - name: run
              mountPath: /run
            - name: workdir
              mountPath: /var/lib
        - name: buildkit
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.buildkit.image.repository }}:{{ .Values.buildkit.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.buildkit.image.pullPolicy }}
          command: ["/usr/bin/buildkitd"]
          args:
            - --addr=unix:///run/buildkit/buildkitd.sock
            - --addr=tcp://0.0.0.0:1234
            {{- if or .Values.tlsCerts.create .Values.tlsCerts.name }}
            - --tlscacert=/etc/buildkit-tlscerts/ca.crt
            - --tlscert=/etc/buildkit-tlscerts/tls.crt
            - --tlskey=/etc/buildkit-tlscerts/tls.key
            {{- end }}
          # env:
          #   - name: BUILDKIT_HOST
          #     value: tcp://127.0.0.1:1234
          ports:
            - name: buildkit
              containerPort: 1234
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - buildctl
                - debug
                - workers
            initialDelaySeconds: 5
            periodSeconds: 60
          volumeMounts:
            - name: config
              mountPath: /etc/buildkit
          {{- if or .Values.tlsCerts.create .Values.tlsCerts.name }}
            - name: tlscerts
              mountPath: /etc/buildkit-tlscerts
          {{- end }}
          {{- range .Values.buildkit.extraMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
          {{- end }}
            - name: run
              mountPath: /run
            - name: workdir
              mountPath: /var/lib
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- end }}
      {{- if .Values.docker.enabled }}
        - name: docker
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.docker.image.repository }}:{{ .Values.docker.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.docker.image.pullPolicy }}
          args:
            - --config-file=/etc/docker-config/daemon.json
            {{- if or .Values.tlsCerts.create .Values.tlsCerts.name }}
            - --tlsverify
            - --tlscacert=/etc/docker-tlscerts/ca.crt
            - --tlscert=/etc/docker-tlscerts/tls.crt
            - --tlskey=/etc/docker-tlscerts/tls.key
            {{- end }}
            {{- if .Values.registry.enabled }}
            - --insecure-registry={{ .Values.registry.name }}
            {{- end }}
          env:
            - name: DOCKER_HOST
              value: tcp://127.0.0.1:2376
          {{- if or .Values.tlsCerts.create .Values.tlsCerts.name }}
            - name: DOCKER_TLS_VERIFY
              value: "1"
          {{- end }}
          ports:
            - name: docker
              containerPort: 2376
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: /etc/docker-config
          {{- if or .Values.tlsCerts.create .Values.tlsCerts.name }}
            - name: tlscerts
              mountPath: /etc/docker-tlscerts
          {{- end }}
          {{- range .Values.docker.extraMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
          {{- end }}
            - name: workdir
              mountPath: /var/lib/docker
            - name: modules
              mountPath: /lib/modules
              readOnly: true
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- end }}
      {{- if .Values.registry.enabled }}
        - name: registry
          image: "{{ .Values.registry.image.repository }}:{{ .Values.registry.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.registry.image.pullPolicy }}
          command:
            - /bin/registry
            - serve
            - /etc/docker/registry/config.yml
          securityContext:
            runAsUser: 0
            capabilities:
              drop: ['ALL']
              add: ['NET_BIND_SERVICE']
          volumeMounts:
            - name: config
              mountPath: /etc/docker/registry
          {{- range .Values.registry.extraMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
          {{- end }}
          resources:
            {{- toYaml .Values.registry.resources | nindent 12 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "build-machine.fullname" . }}
      {{- if or .Values.tlsCerts.create .Values.tlsCerts.name }}
        - name: tlscerts
          secret:
            secretName: {{ include "build-machine.tlsCerts" . }}
      {{- end }}
      {{- if .Values.buildkit.enabled }}
        - name: run
          emptyDir: {}
        {{- range .Values.buildkit.extraMounts }}
        - name: {{ .name }}
          {{- if .hostPath }}
          hostPath:
            path: {{ .hostPath }}
          {{- else }}
          configMap:
            name: {{ .configMap }}
          {{- end }}
        {{- end }}
      {{- end }}
      {{- if .Values.docker.enabled }}
        {{- range .Values.docker.extraMounts }}
        - name: {{ .name }}
          {{- if .hostPath }}
          hostPath:
            path: {{ .hostPath }}
          {{- else if .secret }}
          {{- toYaml .secret | nindent 10 }}
          {{- else }}
          configMap:
            name: {{ .configMap }}
          {{- end }}
        {{- end }}
        - name: modules
          hostPath:
            path: /lib/modules
      {{- end }}
      {{- if .Values.registry.enabled }}
        {{- range .Values.registry.extraMounts }}
        - name: {{ .name }}
          {{- if .hostPath }}
          hostPath:
            path: {{ .hostPath }}
          {{- else }}
          configMap:
            name: {{ .configMap }}
          {{- end }}
        {{- end }}
      {{- end }}
  {{- if not .Values.persistence.enabled }}
        - name: workdir
          emptyDir: {}
  {{- else if and .Values.persistence.enabled .Values.persistence.existingClaim }}
        - name: workdir
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim }}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: workdir
      {{- with .Values.persistence.annotations }}
        annotations:
        {{- range $key, $value := . }}
          {{ $key }}: {{ $value }}
        {{- end }}
      {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
      {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.persistence.storageClass }}"
      {{- end }}
      {{- end }}
  {{- end }}
